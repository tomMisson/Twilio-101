{
	// Place your Twilio-101 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"imports": {
		"scope": "javascript,typescript",
		"prefix": "imports-101",
		"body": [
			"// Use dotenv to allow us to have a file that store our keys without making",
			"// them publicly avalible and also imports twilio and express",
			"",
			"require('dotenv').config();",
			"const express = require('express')",
			"const client = require('twilio')(process.env.SID, process.env.AUTH_TOKEN);",
			"const app = express()",
			"const bodyParser = require('body-parser');",
			"",
			"app.use(bodyParser.urlencoded({ extended: false }));",
			""
		],
		"description": "Imports for Twilio 101"
	},

	"Create express framework": {
		"scope": "javascript,typescript",
		"prefix": "express-101",
		"body": [
			"",
			"app.get('/sms', function (req, res) {",
			"",
			"})",
			"", 
			"app.listen(3000, () => console.log('App started on port 3000'))"
		],
		"description": "Create express framework"
	},

	"Twilio message":{
		"scope": "javascript,typescript",
		"prefix": "message framework-101",
		"body": [
			"client.messages",
			".create({",
			"body: 'This is a demo message',",
			"	from: '${1:fromNumber}',",
			"	to: '${2:toNumber}'",
			"})",
			".then(message => console.log(message.sid));"
		],
		"description": "Create Twilio message framework"
	},

	"Twilio message response":{
		"scope": "javascript,typescript",
		"prefix": "message with time-101",
		"body": [
			"const twiml = new MessagingResponse();",
			"",
			"console.log(req.body.Body);",
			"",
			"if(req.body.Body === 'Whats the time?' || req.body.Body === 'time')",
			"{",
			"	twiml.message('The current time is: ' + time);",
			"	res.writeHead(200, {'Content-Type': 'text/xml'});",
			"	res.end(twiml.toString()); ",
			"}",
			"else{",
			"	twiml.message('');",
			"	res.end(twiml.toString());",
			"}"
		],
		"description": ""
	},

	"Time":{
		"scope": "javascript,typescript",
		"prefix": "JS time-101",
		"body": [
			"var today = new Date();",
			"var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();"
		],
		"description": "JS code for time"
	}
}